{"version":3,"sources":["lib/Input/index.js","lib/index.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","_ref","focus","autoFocus","disabled","value","onInputFocus","index","secure","rest","Object","objectWithoutProperties","input","useRef","componentMounted","useEffect","current","react_default","a","createElement","assign","type","maxLength","ref","onFocus","event","OtpInput","OTPLength","_ref$value","onChange","otpType","className","inputClassName","_useState","useState","_useState2","slicedToArray","activeInput","setActiveInput","getOtpValue","toString","split","handleOtpChange","otp","otpValue","join","focusInputByDirection","nextActiveInput","Math","max","min","focusInput","arguments","length","undefined","changeActiveInputValue","_ref2","nextValue","handleOnPaste","e","preventDefault","clipboardData","getData","slice","pos","shift","handleOnChange","Number","isNaN","target","handleOnKeyDown","key","handelOnInput","select","concat","inputs","push","lib_Input","onKeyDown","onInput","onPaste","renderInputs","defaultProps","OtpInputCard","title","OTP","setOTP","style","marginBottom","lib","App","App_OtpInputCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAuEeA,MAAMC,KAvDP,SAAAC,GASR,IARJC,EAQID,EARJC,MACAC,EAOIF,EAPJE,UACAC,EAMIH,EANJG,SACAC,EAKIJ,EALJI,MACAC,EAIIL,EAJJK,aACAC,EAGIN,EAHJM,MACAC,EAEIP,EAFJO,OACGC,EACCC,OAAAC,EAAA,EAAAD,CAAAT,EAAA,0EACEW,EAAQC,iBAAO,MACfC,EAAmBD,kBAAO,GAChCE,oBAAU,WAEJZ,GAAaD,GACfU,EAAMI,QAAQd,SAGf,IAEHa,oBAAU,WAEJD,EAAiBE,SAAWd,GAC9BU,EAAMI,QAAQd,QAEhBY,EAAiBE,SAAU,GAE1B,CAACd,IAIJ,OACEe,EAAAC,EAAAC,cAAA,QAAAT,OAAAU,OAAA,CACEC,KAAMb,EAAS,WAAa,MAC5Bc,UAAU,IACVC,IAAKX,EACLR,SAAUA,EACVoB,QARqB,SAAAC,GAAK,OAAInB,EAAaC,EAAOkB,IASlDpB,MAAOA,GAAS,IACZI,MCjDJiB,SAAW,SAAAzB,GAUX,IATJ0B,EASI1B,EATJ0B,UACAvB,EAQIH,EARJG,SACAD,EAOIF,EAPJE,UAOIyB,EAAA3B,EANJI,aAMI,IAAAuB,EANI,GAMJA,EALJC,EAKI5B,EALJ4B,SACAC,EAII7B,EAJJ6B,QACAtB,EAGIP,EAHJO,OACAuB,EAEI9B,EAFJ8B,UACAC,EACI/B,EADJ+B,eACIC,EACkCC,mBAAS/B,EAAY,GAAK,GAD5DgC,EAAAzB,OAAA0B,EAAA,EAAA1B,CAAAuB,EAAA,GACGI,EADHF,EAAA,GACgBG,EADhBH,EAAA,GAGEI,EAAc,kBAAOlC,EAAQA,EAAMmC,WAAWC,MAAM,IAAM,IAG1DC,EAAkB,SAAAC,GACtB,IAAIC,EAAWD,EAAIE,KAAK,IACR,WAAZf,IACFc,GAAYA,GAEdf,EAASe,IAaLE,EAAwB,YATX,SAAAlC,GACjB,IAAMmC,EAAkBC,KAAKC,IAAID,KAAKE,IAAIvB,EAAY,EAAGf,GAAQ,GACjE0B,EAAeS,GAQfI,CAAyB,UAD2BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAX,QACPf,EAAc,EAAIA,EAAc,IAI9DkB,EAAyB,SAAAC,GAAiB,IAAfC,EAAe/C,OAAA0B,EAAA,EAAA1B,CAAA8C,EAAA,MACxCb,EAAMJ,IACZI,EAAIN,GAAeoB,EACnBf,EAAgBC,IAIZe,EAAgB,SAAAC,GACpBA,EAAEC,iBAWF,IAVA,IAAMjB,EAAMJ,IAGNsB,EAAgBF,EAAEE,cACrBC,QAAQ,cACRC,MAAM,EAAGpC,EAAYU,GACrBI,MAAM,IAIAuB,EAAM,EAAGA,EAAMrC,IAAaqC,EAC/BA,GAAO3B,GAAewB,EAAcR,OAAS,IAC/CV,EAAIqB,GAAOH,EAAcI,SAI7BvB,EAAgBC,IAGZuB,EAAiB,SAAAP,GACL,WAAZ7B,GAAwBqC,OAAOC,MAAMD,OAAOR,EAAEU,OAAOhE,UAIzDkD,EAAuBI,EAAEU,OAAOhE,OAChCyC,EAAsB,UAIlBwB,EAAkB,SAAAX,GACtB,OAAQA,EAAEY,KACR,IAAK,YACHZ,EAAEC,iBACFL,EAAuB,IACvBT,EAAsB,QACtB,MACF,IAAK,SACHa,EAAEC,iBACFL,EAAuB,IACvB,MACF,IAAK,YACHI,EAAEC,iBACFd,EAAsB,QACtB,MACF,IAAK,aACHa,EAAEC,iBACFd,EAAsB,UAOtB0B,EAAgB,SAAAb,GAChBA,EAAEU,OAAOhE,MAAMgD,OAAS,IAC1BM,EAAEC,iBACFd,EAAsB,UAIpBxC,EAAe,SAACC,EAAOkB,GAC3Ba,EAAe/B,GACfkB,EAAM4C,OAAOI,UAgCf,OAAOxD,EAAAC,EAAAC,cAAA,OAAKY,UAAS,mBAAA2C,OAAqB3C,IA7BrB,WAKnB,IAJA,IAAMY,EAAMJ,IACNoC,EAAS,GAGNpE,EAAQ,EAAGA,EAAQoB,EAAWpB,IACrCoE,EAAOC,KACL3D,EAAAC,EAAAC,cAAC0D,EAAD,CACE9C,UAAWC,EACXuC,IAAKhE,EACLL,MAAOmC,IAAgB9B,EACvBF,MAAOsC,EAAIpC,GACXsB,SAAUqC,EACVY,UAAWR,EACXS,QAASP,EACTQ,QAAStB,EACTpD,aAAcA,EACdC,MAAOA,EAEPH,SAAUA,EACVD,UAAWA,EACXK,OAAQA,KAKd,OAAOmE,EAG+CM,MAgB1DvD,EAASwD,aAAe,CACtBnD,UAAW,GACXC,eAAgB,GAChBL,UAAW,EACXE,SAAU,aACVzB,UAAU,EACVI,QAAQ,EACRL,WAAW,EACXE,MAAO,GACPyB,QAAS,OAGIJ,QC5KTyD,SAAe,SAAAlF,GAAwB,IAArBmF,EAAqBnF,EAArBmF,MAAU3E,EAAWC,OAAAC,EAAA,EAAAD,CAAAT,EAAA,WAAAgC,EACrBC,mBAAS,IADYC,EAAAzB,OAAA0B,EAAA,EAAA1B,CAAAuB,EAAA,GACpCoD,EADoClD,EAAA,GAC/BmD,EAD+BnD,EAAA,GAE3C,OACElB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,uBACbd,EAAAC,EAAAC,cAAA,OAAKoE,MAAO,CAAEC,aAAc,KAAOJ,GACnCnE,EAAAC,EAAAC,cAACsE,EAAD/E,OAAAU,OAAA,CAAUf,MAAOgF,EAAKxD,SAAUyD,GAAY7E,OAgEnCiF,MA3Df,WACE,OACEzE,EAAAC,EAAAC,cAAA,OAAKY,UAAU,gBACbd,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwE,EAAD,CACEP,MAAM,yCACNjF,WAAS,EACTwB,UAAW,EACXG,QAAQ,SACR1B,UAAU,EACVI,QAAM,IAERS,EAAAC,EAAAC,cAACwE,EAAD,CACEP,MAAM,oBAENzD,UAAW,EACXG,QAAQ,SACR1B,UAAU,IAGZa,EAAAC,EAAAC,cAACwE,EAAD,CACEP,MAAM,sBAENzD,UAAW,EACXG,QAAQ,MACR1B,UAAU,IAGZa,EAAAC,EAAAC,cAACwE,EAAD,CACEP,MAAM,WAENzD,UAAW,EACXG,QAAQ,MACR1B,UAAU,IAGZa,EAAAC,EAAAC,cAACwE,EAAD,CACEP,MAAM,sBAENzD,UAAW,EACXG,QAAQ,MACR1B,UAAU,IAGZa,EAAAC,EAAAC,cAACwE,EAAD,CACEP,MAAM,oCACNpD,eAAe,iBAEfL,UAAW,EACXG,QAAQ,MACR1B,UAAU,OCrDAwF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c0049ec4.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * This is react stateless component\n * Renders an input box\n * @param {Object} {\n *   focus,\n *   autoFocus,\n *   disabled,\n *   value,\n *   secure,\n *   ...rest\n * }\n * @returns\n */\nconst Input = ({\n  focus,\n  autoFocus,\n  disabled,\n  value,\n  onInputFocus,\n  index,\n  secure,\n  ...rest\n}) => {\n  const input = useRef(null);\n  const componentMounted = useRef(false);\n  useEffect(() => {\n    // When component mounts\n    if (autoFocus && focus) {\n      input.current.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // When component focus updates\n    if (componentMounted.current && focus) {\n      input.current.focus();\n    }\n    componentMounted.current = true;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [focus]);\n\n  const handelInputFocus = event => onInputFocus(index, event);\n\n  return (\n    <input\n      type={secure ? \"password\" : \"tel\"}\n      maxLength=\"1\"\n      ref={input}\n      disabled={disabled}\n      onFocus={handelInputFocus}\n      value={value || \"\"}\n      {...rest}\n    />\n  );\n};\n\nInput.propTypes = {\n  focus: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  numInputs: PropTypes.number,\n  index: PropTypes.number.isRequired,\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool,\n  value: PropTypes.string,\n  secure: PropTypes.bool\n};\n\nexport default React.memo(Input);\n","// @flow\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Input from \"./Input\";\nimport \"./style.css\";\n\nconst OtpInput = ({\n  OTPLength,\n  disabled,\n  autoFocus,\n  value = \"\",\n  onChange,\n  otpType,\n  secure,\n  className,\n  inputClassName\n}) => {\n  const [activeInput, setActiveInput] = useState(autoFocus ? 0 : -1);\n\n  const getOtpValue = () => (value ? value.toString().split(\"\") : []);\n\n  // Helper to return OTP from input\n  const handleOtpChange = otp => {\n    let otpValue = otp.join(\"\");\n    if (otpType === \"number\") {\n      otpValue = +otpValue;\n    }\n    onChange(otpValue);\n  };\n\n  // Focus on input by index\n  const focusInput = input => {\n    const nextActiveInput = Math.max(Math.min(OTPLength - 1, input), 0);\n    setActiveInput(nextActiveInput);\n  };\n\n  /**\n   * @typedef {\"next\" | \"prev\"} FocusDirections\n   * @param {FocusDirections} direction\n   */\n  const focusInputByDirection = (direction = \"next\") => {\n    focusInput(direction === \"next\" ? activeInput + 1 : activeInput - 1);\n  };\n\n  // Change OTP value at focused input\n  const changeActiveInputValue = ([nextValue]) => {\n    const otp = getOtpValue();\n    otp[activeInput] = nextValue;\n    handleOtpChange(otp);\n  };\n\n  // Handle pasted OTP\n  const handleOnPaste = e => {\n    e.preventDefault();\n    const otp = getOtpValue();\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const clipboardData = e.clipboardData\n      .getData(\"text/plain\")\n      .slice(0, OTPLength - activeInput)\n      .split(\"\");\n\n    // Paste data from focused input onwards\n    // eslint-disable-next-line no-plusplus\n    for (let pos = 0; pos < OTPLength; ++pos) {\n      if (pos >= activeInput && clipboardData.length > 0) {\n        otp[pos] = clipboardData.shift();\n      }\n    }\n\n    handleOtpChange(otp);\n  };\n\n  const handleOnChange = e => {\n    if (otpType === \"number\" && Number.isNaN(Number(e.target.value))) {\n      // preventing number other then number inputs\n      return;\n    }\n    changeActiveInputValue(e.target.value);\n    focusInputByDirection(\"next\");\n  };\n\n  // Handle cases of backspace, delete, left arrow, right arrow\n  const handleOnKeyDown = e => {\n    switch (e.key) {\n      case \"Backspace\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        focusInputByDirection(\"prev\");\n        break;\n      case \"Delete\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        break;\n      case \"ArrowLeft\":\n        e.preventDefault();\n        focusInputByDirection(\"prev\");\n        break;\n      case \"ArrowRight\":\n        e.preventDefault();\n        focusInputByDirection(\"next\");\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handelOnInput = e => {\n    if (e.target.value.length > 1) {\n      e.preventDefault();\n      focusInputByDirection(\"next\");\n    }\n  };\n\n  const onInputFocus = (index, event) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  const renderInputs = () => {\n    const otp = getOtpValue();\n    const inputs = [];\n\n    // eslint-disable-next-line no-plusplus\n    for (let index = 0; index < OTPLength; index++) {\n      inputs.push(\n        <Input\n          className={inputClassName}\n          key={index}\n          focus={activeInput === index}\n          value={otp[index]}\n          onChange={handleOnChange}\n          onKeyDown={handleOnKeyDown}\n          onInput={handelOnInput}\n          onPaste={handleOnPaste}\n          onInputFocus={onInputFocus}\n          index={index}\n          // onBlur={() => setActiveInput(-1)}\n          disabled={disabled}\n          autoFocus={autoFocus}\n          secure={secure}\n        />\n      );\n    }\n\n    return inputs;\n  };\n\n  return <div className={`otp__input-root ${className}`}>{renderInputs()}</div>;\n};\n\nOtpInput.propTypes = {\n  className: PropTypes.string,\n  inputClassName: PropTypes.string,\n  OTPLength: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n  containerStyle: PropTypes.object,\n  disabled: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  secure: PropTypes.bool,\n  otpType: PropTypes.oneOf([\"number\", \"any\"]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\n\nOtpInput.defaultProps = {\n  className: \"\",\n  inputClassName: \"\",\n  OTPLength: 4,\n  onChange: () => {},\n  disabled: false,\n  secure: false,\n  autoFocus: false,\n  value: \"\",\n  otpType: \"any\"\n};\n\nexport default OtpInput;\n","import React, { useState } from \"react\";\nimport OTPInput from \"./lib\";\nimport \"./style.css\";\n\nconst OtpInputCard = ({ title, ...rest }) => {\n  const [OTP, setOTP] = useState(\"\");\n  return (\n    <div className=\"input__card-wrapper\">\n      <div style={{ marginBottom: 12 }}>{title}</div>\n      <OTPInput value={OTP} onChange={setOTP} {...rest} />\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"flex__center\">\n      <h2>OTP Input React</h2>\n      <div>\n        <OtpInputCard\n          title=\"Secrate input with auto focus on mount\"\n          autoFocus\n          OTPLength={4}\n          otpType=\"number\"\n          disabled={false}\n          secure\n        />\n        <OtpInputCard\n          title=\"Number only input\"\n          // autoFocus\n          OTPLength={4}\n          otpType=\"number\"\n          disabled={false}\n          // secure\n        />\n        <OtpInputCard\n          title=\"Any character input\"\n          // autoFocus\n          OTPLength={4}\n          otpType=\"any\"\n          disabled={false}\n          // secure\n        />\n        <OtpInputCard\n          title=\"Disabled\"\n          // autoFocus\n          OTPLength={4}\n          otpType=\"any\"\n          disabled={true}\n          // secure\n        />\n        <OtpInputCard\n          title=\"6 length otp Inputs\"\n          // autoFocus\n          OTPLength={6}\n          otpType=\"any\"\n          disabled={false}\n          // secure\n        />\n        <OtpInputCard\n          title=\"Input styling with inputClassName\"\n          inputClassName=\"bottom__border\"\n          // autoFocus\n          OTPLength={3}\n          otpType=\"any\"\n          disabled={false}\n          // secure\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}