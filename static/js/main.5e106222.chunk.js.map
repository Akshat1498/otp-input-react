{"version":3,"sources":["lib/hooks/resendOTP.js","lib/components/ResendOTP.js","lib/components/Input.js","lib/hooks/useOTP.js","lib/components/OTPReader.js","App.js","serviceWorker.js","index.js"],"names":["useResendOTP","_ref","maxTime","onTimerComplete","timeInterval","onResendClick","timeout","useRef","_useState","useState","_useState2","Object","slicedToArray","remainingTime","setRemainingTime","useEffect","current","clearTimeout","setTimeout","t","handelResendClick","ResendOTP","renderTime","renderButton","style","className","props","objectWithoutProperties","_useResendOTP","react_default","a","createElement","data-testid","objectSpread","display","justifyContent","disabled","onClick","defaultProps","inputDefaultStyles","width","height","textAlign","marginRight","React","memo","focus","autoFocus","value","onInputFocus","index","secure","inputStyles","rest","input","componentMounted","assign","type","maxLength","ref","onFocus","event","useOTP","otpType","onChange","OTPLength","activeInput","setActiveInput","getOtpValue","toString","split","handleOtpChange","otp","otpValue","join","focusInputByDirection","nextActiveInput","Math","max","min","focusInput","arguments","length","undefined","changeActiveInputValue","_ref2","nextValue","isValidateChar","char","charCodeAt","handleOnChange","e","target","handleOnKeyDown","key","preventDefault","handelOnInput","handleOnPaste","data","clipboardData","getData","slice","pos","shift","filteredOtpValue","validCharIndex","charIndex","select","OtpInput","_ref$value","inputClassName","_useOTP","renderInputs","useMemo","inputs","push","components_Input","onKeyDown","onInput","onPaste","concat","OtpInputCard","title","resendOTP","OTP","setOTP","padding","marginBottom","OTPReader","App","alignItems","flexDirection","App_OtpInputCard","components_ResendOTP","alert","Fragment","buttonProps","border","borderBottom","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e106222.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n\nconst useResendOTP = ({\n  maxTime,\n  onTimerComplete,\n  timeInterval,\n  onResendClick\n}) => {\n  const timeout = useRef();\n\n  const [remainingTime, setRemainingTime] = useState(maxTime);\n\n  useEffect(() => {\n    if (timeout.current && remainingTime === 0) {\n      clearTimeout(timeout.current);\n      if (onTimerComplete) {\n        onTimerComplete();\n      }\n    } else {\n      timeout.current = setTimeout(() => {\n        setRemainingTime(t => t - 1);\n      }, timeInterval);\n    }\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [onTimerComplete, remainingTime, timeInterval]);\n\n  const handelResendClick = () => {\n    if (onResendClick) {\n      onResendClick(remainingTime === 0);\n    }\n    setRemainingTime(maxTime);\n  };\n\n  return {\n    handelResendClick,\n    remainingTime\n  };\n};\n\nexport default useResendOTP;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useResendOTP from \"../hooks/resendOTP\";\n\nfunction ResendOTP({ renderTime, renderButton, style, className, ...props }) {\n  const { remainingTime, handelResendClick } = useResendOTP(props);\n  return (\n    <div\n      className={className || \"\"}\n      data-testid=\"otp-resend-root\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        ...style\n      }}\n    >\n      {renderTime ? (\n        renderTime(remainingTime)\n      ) : (\n        <span>{remainingTime} sec</span>\n      )}\n      {renderButton ? (\n        renderButton({\n          disabled: remainingTime !== 0,\n          onClick: handelResendClick,\n          remainingTime\n        })\n      ) : (\n        <button disabled={remainingTime !== 0} onClick={handelResendClick}>\n          Resend OTP\n        </button>\n      )}\n    </div>\n  );\n}\n\nResendOTP.defaultProps = {\n  maxTime: 60,\n  timeInterval: 1000,\n  style: {}\n};\n\nResendOTP.propTypes = {\n  onTimerComplete: PropTypes.func,\n  onResendClick: PropTypes.func,\n  renderTime: PropTypes.func,\n  renderButton: PropTypes.func,\n  maxTime: PropTypes.number,\n  timeInterval: PropTypes.number,\n  style: PropTypes.object,\n  className: PropTypes.string\n};\n\nexport default ResendOTP;\n","import React, { useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst inputDefaultStyles = {\n  width: 32,\n  height: 32,\n  textAlign: \"center\",\n  marginRight: 20\n};\n\n/**\n * This is react stateless component\n * Renders an input box\n * @param {Object} {\n *   focus,\n *   autoFocus,\n *   disabled,\n *   value,\n *   secure,\n *   ...rest\n * }\n * @returns\n */\nconst Input = ({\n  focus,\n  autoFocus,\n  disabled,\n  value,\n  onInputFocus,\n  index,\n  secure,\n  inputStyles,\n  ...rest\n}) => {\n  const input = useRef(null);\n  const componentMounted = useRef(false);\n  useEffect(() => {\n    // When component mounts\n    if (autoFocus && focus) {\n      input.current.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // When component focus updates\n    if (componentMounted.current && focus) {\n      input.current.focus();\n    }\n    componentMounted.current = true;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [focus]);\n\n  const handelInputFocus = event => onInputFocus(index, event);\n\n  return (\n    <input\n      style={{ ...inputDefaultStyles, ...inputStyles }}\n      type={secure ? \"password\" : \"tel\"}\n      maxLength=\"1\"\n      ref={input}\n      disabled={disabled}\n      onFocus={handelInputFocus}\n      value={value || \"\"}\n      {...rest}\n    />\n  );\n};\n\nInput.propTypes = {\n  focus: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  numInputs: PropTypes.number,\n  index: PropTypes.number.isRequired,\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool,\n  value: PropTypes.string,\n  secure: PropTypes.bool,\n  inputStyles: PropTypes.object\n};\n\nexport default React.memo(Input);\n","import { useState } from \"react\";\n\n// const LOWER_A_KEYCODE = 97;\nconst UPPER_A_KEYCODE = 65;\nconst LOWER_Z_KEYCODE = 122;\n// const UPPER_Z_KEYCODE = 90;\nconst ZERO_KEYCODE = 48;\nconst NINE_KEYCODE = 57;\n\nconst useOTP = ({ autoFocus, value, otpType, onChange, OTPLength }) => {\n  const [activeInput, setActiveInput] = useState(autoFocus ? 0 : -1);\n\n  const getOtpValue = () => (value ? value.toString().split(\"\") : []);\n\n  // Helper to return OTP from input\n  const handleOtpChange = otp => {\n    let otpValue = otp.join(\"\");\n    // if (otpType === \"number\") {\n    //   otpValue = +otpValue;\n    // }\n    onChange(otpValue);\n  };\n\n  // Focus on input by index\n  const focusInput = input => {\n    const nextActiveInput = Math.max(Math.min(OTPLength - 1, input), 0);\n    setActiveInput(nextActiveInput);\n  };\n\n  /**\n   * @typedef {\"next\" | \"prev\"} FocusDirections\n   * @param {FocusDirections} direction\n   */\n  const focusInputByDirection = (direction = \"next\") => {\n    focusInput(direction === \"next\" ? activeInput + 1 : activeInput - 1);\n  };\n\n  // Change OTP value at focused input\n  const changeActiveInputValue = ([nextValue]) => {\n    const otp = getOtpValue();\n    otp[activeInput] = nextValue;\n    handleOtpChange(otp);\n  };\n\n  // Handle pasted OTP\n  const handleOnPaste = (e, data) => {\n    e.preventDefault();\n    const otp = getOtpValue();\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const clipboardData =\n      process.env.NODE_ENV === \"test\"\n        ? data.slice(0, OTPLength - activeInput).split(\"\")\n        : e.clipboardData\n            .getData(\"text/plain\")\n            .slice(0, OTPLength - activeInput)\n            .split(\"\");\n\n    // Paste data from focused input onwards\n    // eslint-disable-next-line no-plusplus\n    for (let pos = 0; pos < OTPLength; ++pos) {\n      if (pos >= activeInput && clipboardData.length > 0) {\n        otp[pos] = clipboardData.shift();\n      }\n    }\n\n    // Pass copied value through onChange rules\n    let filteredOtpValue = [otp.length];\n    let validCharIndex = 0;\n    for (let charIndex = 0; charIndex < otp.length; ++charIndex) {\n      if (isValidateChar(otp[charIndex])) {\n        filteredOtpValue[validCharIndex] = otp[charIndex];\n        validCharIndex++;\n      }\n    }\n\n    handleOtpChange(filteredOtpValue);\n  };\n\n  const isValidateChar = char => {\n    switch (otpType) {\n      case \"number\":\n        return !(\n          char.charCodeAt(0) > NINE_KEYCODE || char.charCodeAt(0) < ZERO_KEYCODE\n        );\n      case \"alpha\":\n        return !(\n          char.charCodeAt(0) > LOWER_Z_KEYCODE ||\n          char.charCodeAt(0) < UPPER_A_KEYCODE\n        );\n      case \"alphanumeric\":\n        return !(\n          char.charCodeAt(0) > LOWER_Z_KEYCODE ||\n          char.charCodeAt(0) < ZERO_KEYCODE\n        );\n      default:\n        return true;\n    }\n  };\n\n  const handleOnChange = e => {\n    if (isValidateChar(e.target.value)) {\n      changeActiveInputValue(e.target.value);\n      focusInputByDirection(\"next\");\n    }\n  };\n\n  // Handle cases of backspace, delete, left arrow, right arrow\n  const handleOnKeyDown = e => {\n    switch (e.key) {\n      case \"Backspace\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        focusInputByDirection(\"prev\");\n        break;\n      case \"Delete\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        break;\n      case \"ArrowLeft\":\n        e.preventDefault();\n        focusInputByDirection(\"prev\");\n        break;\n      case \"ArrowRight\":\n        e.preventDefault();\n        focusInputByDirection(\"next\");\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handelOnInput = e => {\n    if (e.target.value.length > 1) {\n      e.preventDefault();\n      focusInputByDirection(\"next\");\n    }\n  };\n\n  const onInputFocus = (index, event) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  return {\n    activeInput,\n    getOtpValue,\n    handleOnChange,\n    handleOnKeyDown,\n    handelOnInput,\n    handleOnPaste,\n    onInputFocus\n  };\n};\n\nexport default useOTP;\n","// @flow\nimport React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Input from \"./Input\";\nimport useOTP from \"../hooks/useOTP\";\n\nconst OtpInput = ({\n  OTPLength,\n  disabled,\n  autoFocus,\n  value = \"\",\n  onChange,\n  otpType,\n  secure,\n  className,\n  inputClassName,\n  inputStyles,\n  style\n}) => {\n  const {\n    activeInput,\n    getOtpValue,\n    handleOnChange,\n    handleOnKeyDown,\n    handelOnInput,\n    handleOnPaste,\n    onInputFocus\n  } = useOTP({\n    autoFocus,\n    value,\n    otpType,\n    onChange,\n    OTPLength\n  });\n\n  // Needs to be memorized\n  const renderInputs = useMemo(() => {\n    const otp = getOtpValue();\n    const inputs = [];\n\n    // eslint-disable-next-line no-plusplus\n    for (let index = 0; index < OTPLength; index++) {\n      inputs.push(\n        <Input\n          className={inputClassName}\n          inputStyles={inputStyles}\n          key={index}\n          focus={activeInput === index}\n          value={otp[index]}\n          onChange={handleOnChange}\n          onKeyDown={handleOnKeyDown}\n          onInput={handelOnInput}\n          onPaste={handleOnPaste}\n          onInputFocus={onInputFocus}\n          index={index}\n          // onBlur={() => setActiveInput(-1)}\n          disabled={disabled}\n          autoFocus={autoFocus}\n          secure={secure}\n          data-testid=\"input\"\n        />\n      );\n    }\n\n    return inputs;\n  }, [\n    getOtpValue,\n    OTPLength,\n    inputClassName,\n    inputStyles,\n    activeInput,\n    handleOnChange,\n    handleOnKeyDown,\n    handelOnInput,\n    handleOnPaste,\n    onInputFocus,\n    disabled,\n    autoFocus,\n    secure\n  ]);\n\n  return (\n    <div\n      style={{ display: \"flex\", ...style }}\n      className={`${className}`}\n      data-testid=\"otp-input-root\"\n    >\n      {renderInputs}\n    </div>\n  );\n};\n\nOtpInput.propTypes = {\n  className: PropTypes.string,\n  inputClassName: PropTypes.string,\n  OTPLength: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  secure: PropTypes.bool,\n  otpType: PropTypes.oneOf([\"number\", \"alpha\", \"alphanumeric\", \"any\"]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  inputStyles: PropTypes.object,\n  style: PropTypes.object\n};\n\nOtpInput.defaultProps = {\n  className: \"\",\n  inputClassName: \"\",\n  OTPLength: 4,\n  onChange: () => {},\n  disabled: false,\n  secure: false,\n  autoFocus: false,\n  value: \"\",\n  otpType: \"any\",\n  inputStyles: {},\n  style: {}\n};\n\nexport default OtpInput;\n","import React, { useState } from \"react\";\nimport OTPInput, { ResendOTP } from \"./lib\";\n\nconst OtpInputCard = ({ title, resendOTP, ...rest }) => {\n  const [OTP, setOTP] = useState(\"\");\n  return (\n    <div\n      style={{\n        padding: 12\n      }}\n    >\n      <div style={{ marginBottom: 12 }}>{title}</div>\n      <OTPInput value={OTP} onChange={setOTP} {...rest} />\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        flexDirection: \"column\"\n      }}\n    >\n      <h2>OTP Input React</h2>\n      <div>\n        <OtpInputCard\n          title=\"Secrate input with auto focus on mount\"\n          autoFocus\n          OTPLength={4}\n          otpType=\"number\"\n          disabled={false}\n          resendOTP={{}}\n          secure\n        />\n        <ResendOTP handelResendClick={() => alert(\"Resend clicked\")} />\n        <OtpInputCard\n          title=\"Number only input\"\n          // autoFocus\n          OTPLength={4}\n          otpType=\"number\"\n          disabled={false}\n          // secure\n        />\n        <ResendOTP\n          renderTime={() => React.Fragment}\n          renderButton={buttonProps => {\n            return (\n              <button {...buttonProps}>\n                {buttonProps.remainingTime !== 0\n                  ? `Please wait for ${buttonProps.remainingTime} sec`\n                  : \"Resend\"}\n              </button>\n            );\n          }}\n        />\n        <OtpInputCard\n          title=\"Alphabetic input\"\n          // autoFocus\n          OTPLength={4}\n          otpType=\"alpha\"\n          disabled={false}\n          // secure\n        />\n        <OtpInputCard\n          title=\"Alphanumeric input\"\n          // autoFocus\n          OTPLength={4}\n          otpType=\"alphanumeric\"\n          disabled={false}\n          // secure\n        />\n        <OtpInputCard\n          title=\"Any character input\"\n          // autoFocus\n          OTPLength={4}\n          otpType=\"any\"\n          disabled={false}\n          // secure\n        />\n        <OtpInputCard\n          title=\"Disabled\"\n          // autoFocus\n          OTPLength={4}\n          otpType=\"any\"\n          disabled={true}\n          // secure\n        />\n        <OtpInputCard\n          title=\"6 length otp Inputs\"\n          // autoFocus\n          OTPLength={6}\n          otpType=\"any\"\n          disabled={false}\n          // secure\n        />\n        <OtpInputCard\n          title=\"Input styling with inputStyles prop\"\n          inputClassName=\"bottom__border\"\n          // autoFocus\n          OTPLength={3}\n          otpType=\"any\"\n          disabled={false}\n          inputStyles={{\n            border: 0,\n            borderBottom: \"1px solid #cbcbcb\"\n          }}\n          // secure\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}