{"version":3,"sources":["lib/components/Input.js","lib/hooks/useOTP.js","lib/components/OTPReader.js","App.js","serviceWorker.js","index.js"],"names":["inputDefaultStyles","width","height","textAlign","marginRight","React","memo","_ref","focus","autoFocus","disabled","value","onInputFocus","index","secure","inputStyles","rest","Object","objectWithoutProperties","input","useRef","componentMounted","useEffect","current","react_default","a","createElement","assign","style","objectSpread","type","maxLength","ref","onFocus","event","useOTP","otpType","onChange","OTPLength","_useState","useState","_useState2","slicedToArray","activeInput","setActiveInput","getOtpValue","toString","split","handleOtpChange","otp","otpValue","join","focusInputByDirection","nextActiveInput","Math","max","min","focusInput","arguments","length","undefined","changeActiveInputValue","_ref2","nextValue","isValidateChar","char","charCodeAt","handleOnChange","e","target","handleOnKeyDown","key","preventDefault","handelOnInput","handleOnPaste","data","clipboardData","getData","slice","pos","shift","filteredOtpValue","validCharIndex","charIndex","select","OtpInput","_ref$value","className","inputClassName","_useOTP","renderInputs","useMemo","inputs","push","components_Input","onKeyDown","onInput","onPaste","data-testid","display","concat","defaultProps","OtpInputCard","title","OTP","setOTP","padding","marginBottom","OTPReader","App","alignItems","flexDirection","App_OtpInputCard","border","borderBottom","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ef45410.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst inputDefaultStyles = {\n  width: 32,\n  height: 32,\n  textAlign: \"center\",\n  marginRight: 20\n};\n\n/**\n * This is react stateless component\n * Renders an input box\n * @param {Object} {\n *   focus,\n *   autoFocus,\n *   disabled,\n *   value,\n *   secure,\n *   ...rest\n * }\n * @returns\n */\nconst Input = ({\n  focus,\n  autoFocus,\n  disabled,\n  value,\n  onInputFocus,\n  index,\n  secure,\n  inputStyles,\n  ...rest\n}) => {\n  const input = useRef(null);\n  const componentMounted = useRef(false);\n  useEffect(() => {\n    // When component mounts\n    if (autoFocus && focus) {\n      input.current.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // When component focus updates\n    if (componentMounted.current && focus) {\n      input.current.focus();\n    }\n    componentMounted.current = true;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [focus]);\n\n  const handelInputFocus = event => onInputFocus(index, event);\n\n  return (\n    <input\n      style={{ ...inputDefaultStyles, ...inputStyles }}\n      type={secure ? \"password\" : \"tel\"}\n      maxLength=\"1\"\n      ref={input}\n      disabled={disabled}\n      onFocus={handelInputFocus}\n      value={value || \"\"}\n      {...rest}\n    />\n  );\n};\n\nInput.propTypes = {\n  focus: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  numInputs: PropTypes.number,\n  index: PropTypes.number.isRequired,\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool,\n  value: PropTypes.string,\n  secure: PropTypes.bool,\n  inputStyles: PropTypes.object\n};\n\nexport default React.memo(Input);\n","import { useState } from \"react\";\n\nconst LOWER_A_KEYCODE = 97;\nconst UPPER_A_KEYCODE = 65;\nconst LOWER_Z_KEYCODE = 122;\nconst UPPER_Z_KEYCODE = 90;\nconst ZERO_KEYCODE = 48;\nconst NINE_KEYCODE = 57;\n\nconst useOTP = ({ autoFocus, value, otpType, onChange, OTPLength }) => {\n  const [activeInput, setActiveInput] = useState(autoFocus ? 0 : -1);\n\n  const getOtpValue = () => (value ? value.toString().split(\"\") : []);\n\n  // Helper to return OTP from input\n  const handleOtpChange = otp => {\n    let otpValue = otp.join(\"\");\n    // if (otpType === \"number\") {\n    //   otpValue = +otpValue;\n    // }\n    onChange(otpValue);\n  };\n\n  // Focus on input by index\n  const focusInput = input => {\n    const nextActiveInput = Math.max(Math.min(OTPLength - 1, input), 0);\n    setActiveInput(nextActiveInput);\n  };\n\n  /**\n   * @typedef {\"next\" | \"prev\"} FocusDirections\n   * @param {FocusDirections} direction\n   */\n  const focusInputByDirection = (direction = \"next\") => {\n    focusInput(direction === \"next\" ? activeInput + 1 : activeInput - 1);\n  };\n\n  // Change OTP value at focused input\n  const changeActiveInputValue = ([nextValue]) => {\n    const otp = getOtpValue();\n    otp[activeInput] = nextValue;\n    handleOtpChange(otp);\n  };\n\n  // Handle pasted OTP\n  const handleOnPaste = (e, data) => {\n    e.preventDefault();\n    const otp = getOtpValue();\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const clipboardData =\n      process.env.NODE_ENV === \"test\"\n        ? data.slice(0, OTPLength - activeInput).split(\"\")\n        : e.clipboardData\n            .getData(\"text/plain\")\n            .slice(0, OTPLength - activeInput)\n            .split(\"\");\n\n    // Paste data from focused input onwards\n    // eslint-disable-next-line no-plusplus\n    for (let pos = 0; pos < OTPLength; ++pos) {\n      if (pos >= activeInput && clipboardData.length > 0) {\n        otp[pos] = clipboardData.shift();\n      }\n    }\n\n    // Pass copied value through onChange rules\n    let filteredOtpValue = [otp.length];\n    let validCharIndex = 0;\n    for (let charIndex = 0; charIndex < otp.length; ++charIndex) {\n      if (isValidateChar(otp[charIndex])) {\n        filteredOtpValue[validCharIndex] = (otp[charIndex]);\n        validCharIndex++;\n      }\n    }\n\n    handleOtpChange(filteredOtpValue);\n  };\n\n  const isValidateChar = char => {\n    switch (otpType) {\n      case \"number\":\n        return !(char.charCodeAt(0) > NINE_KEYCODE || char.charCodeAt(0) < ZERO_KEYCODE);\n      case \"alpha\":\n        return !(char.charCodeAt(0) > LOWER_Z_KEYCODE || char.charCodeAt(0) < UPPER_A_KEYCODE);\n      case \"alphanumeric\":\n        return !(char.charCodeAt(0) > LOWER_Z_KEYCODE || char.charCodeAt(0) < ZERO_KEYCODE);\n      default:\n        return true;\n    }\n  }\n\n  const handleOnChange = e => {\n    if (isValidateChar(e.target.value)) {\n      changeActiveInputValue(e.target.value);\n      focusInputByDirection(\"next\");\n    }\n  };\n\n  // Handle cases of backspace, delete, left arrow, right arrow\n  const handleOnKeyDown = e => {\n    switch (e.key) {\n      case \"Backspace\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        focusInputByDirection(\"prev\");\n        break;\n      case \"Delete\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        break;\n      case \"ArrowLeft\":\n        e.preventDefault();\n        focusInputByDirection(\"prev\");\n        break;\n      case \"ArrowRight\":\n        e.preventDefault();\n        focusInputByDirection(\"next\");\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handelOnInput = e => {\n    if (e.target.value.length > 1) {\n      e.preventDefault();\n      focusInputByDirection(\"next\");\n    }\n  };\n\n  const onInputFocus = (index, event) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  return {\n    activeInput,\n    getOtpValue,\n    handleOnChange,\n    handleOnKeyDown,\n    handelOnInput,\n    handleOnPaste,\n    onInputFocus\n  };\n};\n\nexport default useOTP;\n","// @flow\nimport React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Input from \"./Input\";\nimport useOTP from \"../hooks/useOTP\";\n\nconst OtpInput = ({\n  OTPLength,\n  disabled,\n  autoFocus,\n  value = \"\",\n  onChange,\n  otpType,\n  secure,\n  className,\n  inputClassName,\n  inputStyles,\n  style\n}) => {\n  const {\n    activeInput,\n    getOtpValue,\n    handleOnChange,\n    handleOnKeyDown,\n    handelOnInput,\n    handleOnPaste,\n    onInputFocus\n  } = useOTP({\n    autoFocus,\n    value,\n    otpType,\n    onChange,\n    OTPLength\n  });\n\n  // Needs to be memorized\n  const renderInputs = useMemo(() => {\n    const otp = getOtpValue();\n    const inputs = [];\n\n    // eslint-disable-next-line no-plusplus\n    for (let index = 0; index < OTPLength; index++) {\n      inputs.push(\n        <Input\n          className={inputClassName}\n          inputStyles={inputStyles}\n          key={index}\n          focus={activeInput === index}\n          value={otp[index]}\n          onChange={handleOnChange}\n          onKeyDown={handleOnKeyDown}\n          onInput={handelOnInput}\n          onPaste={handleOnPaste}\n          onInputFocus={onInputFocus}\n          index={index}\n          // onBlur={() => setActiveInput(-1)}\n          disabled={disabled}\n          autoFocus={autoFocus}\n          secure={secure}\n          data-testid=\"input\"\n        />\n      );\n    }\n\n    return inputs;\n  }, [\n    getOtpValue,\n    OTPLength,\n    inputClassName,\n    inputStyles,\n    activeInput,\n    handleOnChange,\n    handleOnKeyDown,\n    handelOnInput,\n    handleOnPaste,\n    onInputFocus,\n    disabled,\n    autoFocus,\n    secure\n  ]);\n\n  return (\n    <div\n      style={{ display: \"flex\", ...style }}\n      className={`${className}`}\n      data-testid=\"otp-input-root\"\n    >\n      {renderInputs}\n    </div>\n  );\n};\n\nOtpInput.propTypes = {\n  className: PropTypes.string,\n  inputClassName: PropTypes.string,\n  OTPLength: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  secure: PropTypes.bool,\n  otpType: PropTypes.oneOf([\"number\", \"alpha\", \"alphanumeric\", \"any\"]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  inputStyles: PropTypes.object,\n  style: PropTypes.object\n};\n\nOtpInput.defaultProps = {\n  className: \"\",\n  inputClassName: \"\",\n  OTPLength: 4,\n  onChange: () => {},\n  disabled: false,\n  secure: false,\n  autoFocus: false,\n  value: \"\",\n  otpType: \"any\",\n  inputStyles: {},\n  style: {}\n};\n\nexport default OtpInput;\n","import React, { useState } from \"react\";\nimport OTPInput from \"./lib\";\n\nconst OtpInputCard = ({ title, ...rest }) => {\n  const [OTP, setOTP] = useState(\"\");\n  return (\n    <div\n      style={{\n        padding: 12\n      }}\n    >\n      <div style={{ marginBottom: 12 }}>{title}</div>\n      <OTPInput value={OTP} onChange={setOTP} {...rest} />\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        flexDirection: \"column\"\n      }}\n    >\n      <h2>OTP Input React</h2>\n      <div>\n        <OtpInputCard\n          title=\"Secrate input with auto focus on mount\"\n          autoFocus\n          OTPLength={4}\n          otpType=\"number\"\n          disabled={false}\n          secure\n        />\n        <OtpInputCard\n          title=\"Number only input\"\n          // autoFocus\n          OTPLength={4}\n          otpType=\"number\"\n          disabled={false}\n          // secure\n        />\n        <OtpInputCard\n          title=\"alpha\"\n          // autoFocus\n          OTPLength={4}\n          otpType=\"alpha\"\n          disabled={false}\n          // secure\n        />\n        <OtpInputCard\n          title=\"alphanumeric\"\n          // autoFocus\n          OTPLength={4}\n          otpType=\"alphanumeric\"\n          disabled={false}\n          // secure\n        />\n        <OtpInputCard\n          title=\"Any character input\"\n          // autoFocus\n          OTPLength={4}\n          otpType=\"any\"\n          disabled={false}\n          // secure\n        />\n        <OtpInputCard\n          title=\"Disabled\"\n          // autoFocus\n          OTPLength={4}\n          otpType=\"any\"\n          disabled={true}\n          // secure\n        />\n        <OtpInputCard\n          title=\"6 length otp Inputs\"\n          // autoFocus\n          OTPLength={6}\n          otpType=\"any\"\n          disabled={false}\n          // secure\n        />\n        <OtpInputCard\n          title=\"Input styling with inputStyles prop\"\n          inputClassName=\"bottom__border\"\n          // autoFocus\n          OTPLength={3}\n          otpType=\"any\"\n          disabled={false}\n          inputStyles={{\n            border: 0,\n            borderBottom: \"1px solid #cbcbcb\"\n          }}\n          // secure\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}